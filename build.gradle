buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply plugin: 'com.github.ben-manes.versions'


allprojects {
    defaultTasks 'clean', 'build', 'install'
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'java'

    group = 'ch.frostnova'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    sourceSets {
        main { output.resourcesDir = output.classesDir }
        test { output.resourcesDir = output.classesDir }
    }

    jar { duplicatesStrategy = 'exclude' }

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    def dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    def buildDate = java.time.LocalDateTime.now()

    jar {
        manifest {
            attributes(
                    "Name": project.name,
                    "Version": project.version,
                    "Build-Date": dateTimeFormat.format(buildDate)
            )
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    if (project.hasProperty('release')) {

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'Idx Commons'
                        packaging 'jar'
                        description 'Idx Commons is a collection of general-purpose base libs.'
                        url 'https://github.com/pwalser75/idx-commons'

                        scm {
                            connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                            developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                            url 'http://foo.googlecode.com/svn/trunk/'
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'pwalser'
                                name 'Peter Walser'
                                email 'pwalser@frostnova.ch'
                            }
                        }
                    }
                }
            }
        }
    }
}


dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

ext.libs = [
        jee        : "javax:javaee-api:7.0",
        testbase   : [
                "junit:junit:4.12",
                "org.mockito:mockito-core:2.13.0"
        ],
        loggingAPI : [
                "org.slf4j:slf4j-api:1.7.25"
        ],
        loggingImpl: [
                "org.slf4j:jcl-over-slf4j:1.7.25",
                "org.slf4j:jul-to-slf4j:1.7.25",
                "ch.qos.logback:logback-classic:1.2.3"
        ],
        frostnova  : [
                check: "ch.frostnova:check:1.0.0"
        ]
]
